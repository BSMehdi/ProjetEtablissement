Etudiant :

Reqûetes supportées : 

Method : get 
URL : http://localhost:8080/etudiant/all
Description : Retourne la liste de tout les étudiants, la liste sera null s'il n'y pas d'étudiants.
Réponse ok : Status 200, corps de réponse avec error (false) message ("SUCCESS") et objet (liste d'objets de type EtudiantDto au format Json).
	Exemple :
	{
	"error": false,
	"message": "SUCCESS",
	"object": [
	  {
	"nom": "Bob",
	"prenom": "Marley",
	"adresse": "3eme nuage a gauche",
	"codePostal": 0,
	"ville": "paradis",
	"sexe": true,
	"cni": 0,
	"telephone": 0,
	"email": "jamin@with.you",
	"enEtude": true
	},
	  {
	"nom": "Bob",
	"prenom": "Marley",
	"adresse": "3eme nuage a gauche",
	"codePostal": 0,
	"ville": "paradis",
	"sexe": true,
	"cni": 0,
	"telephone": 0,
	"email": "jamin@with.you",
	"enEtude": true
	}
	],
	}
Réponse non ok : Status 400, corps réponse avec error (true) message ("FAIL") et objet (null au format Json)



Method : get 
URL : http://localhost:8080/etudiant/{id}
Entrée : Dans l'url : Identifiant id (type Number) de l'étudiant à rechercher
Description : Retourne l'étudiant avec la valeur d'id renseignée, si l'id renseigné n'existe pas c'est une BadRequest.
Réponse ok : Status 200, corps de réponse avec error (false) message ("SUCCESS") et objet (EtudiantDto au format Json).
	Exemple : 
	{
	"error": Boolean,
	"message": String,
	"object": {
	"nom": String,
	"prenom": String,
	"adresse": String,
	"codePostal": Number,
	"ville": String,
	"sexe": Boolean,
	"cni": Number,
	"telephone": Number,
	"email": String,
	"enEtude": Boolean
	}
	}
	
Réponse non ok : Status 400, corps réponse avec error (true) message ("FAIL") et objet (null au format Json)



Method : post 
URL : http://localhost:8080/etudiant
Entrée : Dans le corps de la reqûete : un Objet EtudiantDto au format Json : 
	Exemple :
	"etudiantDto": {
	"nom": String,
	"prenom": String,
	"adresse": String,
	"codePostal": Number,
	"ville": String,
	"sexe": boolean,
	"cni": Number,
	"telephone": Number,
	"email": String,
	"enEtude": boolean
	}
Description : Enregistre de façon persistente un étudiant, avec un identifiant autogénéré par incrémentation.
Réponse ok : Status 200, corps de réponse avec error (false) message ("SUCCESS") et objet (de type EtudiantDtoCreate au format Json).
	Exemple : 
	{
	"error": Boolean,
	"message": String,
	"object": {
	"nom": String,
	"prenom": String,
	"adresse": String,
	"codePostal": Number,
	"ville": String,
	"sexe": Boolean,
	"cni": Number,
	"telephone": Number,
	"email": String,
	"enEtude": Boolean
	}
	}
Réponse non ok : Status 400, corps réponse avec error (true) message ("FAIL") et objet (null au format Json)


Method : put 
URL : http://localhost:8080/etudiant
Entrée : Dans le corps de la reqûete : un objet EtudiantDtoCreate au format Json : 
	Exemple :
	"etudiantDtoCreate": {
	"id": Number,
	"nom": String,
	"prenom": String,
	"adresse": String,
	"codePostal": Number,
	"ville": String,
	"sexe": Boolean,
	"cni": Number,
	"telephone": Number,
	"email": String,
	"enEtude": Boolean
	}
Description : Modifie dans la base de données l'étudiant ayant l'identifiant {id} avec les autres informations fournies. S'il n'existe pas d'étudiant avec cet id, c'est une BadRequest.
Réponse ok : Status 200, corps de réponse avec error (false) message ("SUCCESS") et objet (null au format Json).
Réponse non ok : Status 400, corps réponse avec error (true) message ("FAIL") et objet (null au format Json)


Method : delete 
URL : http://localhost:8080/etudiant/{id}
Entrée : Dans l'url : Identifiant id (type Number) de l'étudiant à supprimer
Description : Supprime l'étudiant avec la valeur d'id renseignée, si l'id renseigné n'existe pas, c'est une BadRequest.
Réponse ok : Status 200, corps de réponse avec error (false) message ("SUCCESS") et objet (null au format Json).
Réponse non ok : Status 400, corps réponse avec error (true) message ("FAIL") et objet (null au format Json)
